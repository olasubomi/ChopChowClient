{"ast":null,"code":"/*\n * EJS Embedded JavaScript templates\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\n/**\n * Private utility functions\n * @module utils\n * @private\n */\n'use strict';\n\nvar regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n/**\n * Escape characters reserved in regular expressions.\n *\n * If `string` is `undefined` or `null`, the empty string is returned.\n *\n * @param {String} string Input string\n * @return {String} Escaped string\n * @static\n * @private\n */\n\nexports.escapeRegExpChars = function (string) {\n  // istanbul ignore if\n  if (!string) {\n    return '';\n  }\n\n  return String(string).replace(regExpChars, '\\\\$&');\n};\n\nvar _ENCODE_HTML_RULES = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&#34;',\n  \"'\": '&#39;'\n};\nvar _MATCH_HTML = /[&<>'\"]/g;\n\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n}\n/**\n * Stringified version of constants used by {@link module:utils.escapeXML}.\n *\n * It is used in the process of generating {@link ClientFunction}s.\n *\n * @readonly\n * @type {String}\n */\n\n\nvar escapeFuncStr = 'var _ENCODE_HTML_RULES = {\\n' + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + '    }\\n' + '  , _MATCH_HTML = /[&<>\\'\"]/g;\\n' + 'function encode_char(c) {\\n' + '  return _ENCODE_HTML_RULES[c] || c;\\n' + '};\\n';\n/**\n * Escape characters reserved in XML.\n *\n * If `markup` is `undefined` or `null`, the empty string is returned.\n *\n * @implements {EscapeCallback}\n * @param {String} markup Input string\n * @return {String} Escaped string\n * @static\n * @private\n */\n\nexports.escapeXML = function (markup) {\n  return markup == undefined ? '' : String(markup).replace(_MATCH_HTML, encode_char);\n};\n\nexports.escapeXML.toString = function () {\n  return Function.prototype.toString.call(this) + ';\\n' + escapeFuncStr;\n};\n/**\n * Naive copy of properties from one object to another.\n * Does not recurse into non-scalar properties\n * Does not check to see if the property has a value before copying\n *\n * @param  {Object} to   Destination object\n * @param  {Object} from Source object\n * @return {Object}      Destination object\n * @static\n * @private\n */\n\n\nexports.shallowCopy = function (to, from) {\n  from = from || {};\n\n  for (var p in from) {\n    to[p] = from[p];\n  }\n\n  return to;\n};\n/**\n * Naive copy of a list of key names, from one object to another.\n * Only copies property if it is actually defined\n * Does not recurse into non-scalar properties\n *\n * @param  {Object} to   Destination object\n * @param  {Object} from Source object\n * @param  {Array} list List of properties to copy\n * @return {Object}      Destination object\n * @static\n * @private\n */\n\n\nexports.shallowCopyFromList = function (to, from, list) {\n  for (var i = 0; i < list.length; i++) {\n    var p = list[i];\n\n    if (typeof from[p] != 'undefined') {\n      to[p] = from[p];\n    }\n  }\n\n  return to;\n};\n/**\n * Simple in-process cache implementation. Does not implement limits of any\n * sort.\n *\n * @implements Cache\n * @static\n * @private\n */\n\n\nexports.cache = {\n  _data: {},\n  set: function set(key, val) {\n    this._data[key] = val;\n  },\n  get: function get(key) {\n    return this._data[key];\n  },\n  remove: function remove(key) {\n    delete this._data[key];\n  },\n  reset: function reset() {\n    this._data = {};\n  }\n};","map":null,"metadata":{},"sourceType":"script"}